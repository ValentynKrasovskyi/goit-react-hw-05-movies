{"version":3,"file":"static/js/373.420182bc.chunk.js","mappings":"2LACA,EAA6B,8BAA7B,EAAuE,6BAAvE,EAAgH,6B,SCEnGA,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpBC,GAAWC,EAAAA,EAAAA,MAGjB,OAAKF,GAKH,eAAIG,UAAWC,EAAf,SACGJ,EAAOK,KAAI,SAAAC,GACZ,IAAMC,EAAQD,EAAME,cAAN,0CACwBF,EAAME,eACzC,mEAEH,OAAO,eAAmBL,UAAWC,EAA9B,UACN,UAAC,KAAD,CAAMK,GAAE,kBAAaH,EAAMI,IAAMC,MAAQ,CAAEC,KAAMX,GAAWE,UAAWC,EAAvE,WACG,wBAAKE,EAAMO,SACV,gBACAC,IAAKP,EACLQ,IAAKT,EAAMO,YALAP,EAAMI,GASvB,WApBW,CAuBf,C,mHC7BD,EAA4B,yBAA5B,EAA4D,oBAA5D,EAAkG,+B,SCwDlG,MAlDA,WAAmB,IAAD,EAElB,GAAwCM,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAa,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAwBnD,OAtBAC,EAAAA,EAAAA,YAAU,WACV,IAAKF,EAGL,OAFAJ,EAAe,SACfF,EAAgB,IAKhBE,EAAeI,IACfG,EAAAA,EAAAA,IAAgBH,GAAeI,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACrCX,EAAgBW,EACjB,GACA,GAAE,CAACL,KAWJ,iBAAKrB,UAAWC,EAAhB,WACA,kBAAM0B,SAVe,SAAAC,GACrBA,EAAMC,iBACqB,KAAvBb,EAAYc,QAGhBV,EAAgB,CAAEW,MAAOf,GACxB,EAI6BhB,UAAWC,EAAzC,WACA,kBACAD,UAAWC,EACX+B,KAAK,OACLC,aAAa,MACbC,KAAK,cACLC,WAAS,EACTC,YAAY,eACZC,MAAOrB,EACPsB,SAAU,SAAAC,GAAC,OAAItB,EAAesB,EAAEC,OAAOH,MAA5B,KAEX,mBAAQL,KAAK,SAAb,wBAEA,SAACpC,EAAA,EAAD,CAAWC,OAAQiB,MAGlB,C,+LCrDD2B,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAgB,mCAAG,sGACPF,EAAAA,EAAAA,IAAU,sBAAuB,CACtDG,OAAQ,CACNC,KAAM,KAHoB,uBACtBC,EADsB,EACtBA,KADsB,kBAMvBA,GANuB,2CAAH,qDAUhBtB,EAAe,mCAAG,WAAMO,GAAN,yFACNU,EAAAA,EAAAA,IAAU,gBAAiB,CAChDG,OAAQ,CACNb,MAAAA,KAHyB,uBACrBe,EADqB,EACrBA,KADqB,kBAMtBA,GANsB,2CAAH,sDAUfC,EAAY,mCAAG,WAAMC,GAAN,yFACHP,EAAAA,EAAAA,IAAA,iBAAoBO,IADjB,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAW,mCAAG,WAAMD,GAAN,yFACFP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,aADE,uBACjBF,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAMXI,EAAa,mCAAG,WAAMF,GAAN,yFACJP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,aADI,uBACnBF,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,qD","sources":["webpack://react-homework-template/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.jsx","webpack://react-homework-template/./src/pages/Movies/Movie.module.css?ed9b","pages/Movies/Movies.jsx","services/MovieAPI.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"listMovies\":\"MovieList_listMovies__H8Nfh\",\"itemMovie\":\"MovieList_itemMovie__aFzIB\",\"cardMovie\":\"MovieList_cardMovie__4XuK8\"};","import { Link, useLocation } from \"react-router-dom\";\nimport css from \"./MovieList.module.css\"\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n\n\n  if (!movies){ return } \n  \n  else {\n\n    return (\n    <ul className={css.listMovies}>\n      {movies.map(movie => {\n      const image = movie.backdrop_path \n       ? `https://image.tmdb.org/t/p/w500/${movie.backdrop_path}`\n       : 'https://dummyimage.com/400x225/000/fff&text=Image+is+not+defined';\n      \n      return <li key={movie.id} className={css.itemMovie}>\n       <Link to={`/movies/${movie.id}`} state ={{ from: location}} className={css.cardMovie}>\n          <h2>{movie.title}</h2>\n           <img\n           src={image}\n           alt={movie.title}\n          />\n         </Link>\n        </li>\n    })}\n    </ul>\n  )}\n};","// extracted by mini-css-extract-plugin\nexport default {\"formStyle\":\"Movie_formStyle__KcL74\",\"form\":\"Movie_form__seph4\",\"SearchFormInput\":\"Movie_SearchFormInput__JuQhX\"};","import { getMovieByQuery } from \"services/MovieAPI\";\nimport { useEffect, useState } from 'react';\nimport { MovieList } from \"components/MovieList/MovieList\";\nimport { useSearchParams } from 'react-router-dom';\n\nimport css from \"./Movie.module.css\"\n\nfunction Movies (){\n\nconst [searchMovies, setSearchMovies] = useState([]);\nconst [searchQuery, setSearchQuery] = useState('');\nconst [searchParams, setSearchParams] = useSearchParams();\n\nconst movieToSearch = searchParams.get('query') ?? '';\n\nuseEffect(() => {\nif (!movieToSearch) {\nsetSearchQuery('');\nsetSearchMovies([]);\nreturn;\n}\n\n\nsetSearchQuery(movieToSearch);\ngetMovieByQuery(movieToSearch).then(({ results }) => {      \n  setSearchMovies(results);\n});\n}, [movieToSearch]);\n\nconst onFormSubmit = event => {\nevent.preventDefault();\nif (searchQuery.trim() === '') {\nreturn;\n}\nsetSearchParams({ query: searchQuery });\n};\n\nreturn (\n<div className={css.formStyle}>\n<form onSubmit={onFormSubmit} className={css.form}>\n<input\nclassName={css.SearchFormInput}\ntype=\"text\"\nautoComplete=\"off\"\nname=\"searchMovie\"\nautoFocus\nplaceholder=\"Search movie\"\nvalue={searchQuery}\nonChange={e => setSearchQuery(e.target.value)}\n/>\n<button type=\"submit\"> Find </button>\n</form>\n<MovieList movies={searchMovies}/>\n</div>\n)\n}\n\nexport default Movies;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: '183b2fc764c61b36ed7d01da86229b91',\n};\n\nexport const getTrendingMovie = async () => {\n  const { data } = await axios.get('/trending/movie/day', {\n    params: {\n      page: 1,\n    },\n  });\n  return data;\n};\n\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\n\nexport const getMovieById = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}`);    \n  return data;\n};\n\nexport const getCastById = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}/credits`);    \n  return data;\n};\n\n\nexport const getReviewById = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}/reviews`);    \n  return data;\n};"],"names":["MovieList","movies","location","useLocation","className","css","map","movie","image","backdrop_path","to","id","state","from","title","src","alt","useState","searchMovies","setSearchMovies","searchQuery","setSearchQuery","useSearchParams","searchParams","setSearchParams","movieToSearch","get","useEffect","getMovieByQuery","then","results","onSubmit","event","preventDefault","trim","query","type","autoComplete","name","autoFocus","placeholder","value","onChange","e","target","axios","api_key","getTrendingMovie","params","page","data","getMovieById","movie_id","getCastById","getReviewById"],"sourceRoot":""}